<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
					xmlns:controls="clr-namespace:RepoZ.App.Win.Controls"
                    xmlns:local="clr-namespace:RepoZ.App.Win">

	<!-- The taskbar context menu - the first row is a dummy to show off simple data binding -->
	<!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
  -->
	<controls:AcrylicContextMenu x:Shared="false" x:Key="SysTrayMenu" >
		<controls:AcrylicMenuItem Header="{DynamicResource Open}" Command="{Binding OpenCommand}" />
        <controls:AcrylicMenuItem Header="{DynamicResource StartWithWindows}" 
                  Command="{Binding StartWithWindows}"
                  Visibility="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                  />
        <controls:AcrylicMenuItem Header="{DynamicResource NotStartWithWindows}" 
                  Command="{Binding DoNotStartWithWindows}" 
                  Visibility="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                  />
		<Separator />
		<controls:AcrylicMenuItem Header="{DynamicResource Exit}" Command="{Binding ExitApplicationCommand}" />
	</controls:AcrylicContextMenu>


	<!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
	<tb:TaskbarIcon x:Key="NotifyIcon"
                    IconSource="/App.ico"
                    LeftClickCommand="{Binding OpenCommand}"
					NoLeftClickDelay="True"
                    ContextMenu="{StaticResource SysTrayMenu}">

		<!-- self-assign a data context (could also be done programmatically) -->
		<tb:TaskbarIcon.DataContext>
			<local:NotifyIconViewModel />
		</tb:TaskbarIcon.DataContext>
	</tb:TaskbarIcon>

</ResourceDictionary>